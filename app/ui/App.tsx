import { useState } from 'react';
import { PlanPreviewPage } from './pages/PlanPreviewPage.js';
import { ProgressPage } from './pages/ProgressPage.js';
import { ResultsPage } from './pages/ResultsPage.js';
import { SettingsPage } from './pages/SettingsPage.js';
import { WizardPage } from './pages/WizardPage.js';
import type { PlanNodeView } from './components/PlanGraph.js';

type RunView = { id: string; nodeId: string; agentName: string; status: string };
type LogView = { id: string; type: string; message: string; timestamp: string };
type ArtifactView = { id: string; type: 'text' | 'image' | 'video'; path: string; metadata?: Record<string, unknown> };

export function App() {
  const [step, setStep] = useState<'wizard' | 'plan' | 'progress' | 'results' | 'settings'>('wizard');
  const [planNodes, setPlanNodes] = useState<PlanNodeView[]>([]);
  const [runs, setRuns] = useState<RunView[]>([]);
  const [logs, setLogs] = useState<LogView[]>([]);
  const [results, setResults] = useState<{ text: string; artifacts: ArtifactView[] }>({
    text: '',
    artifacts: []
  });

  const createTask = (data: { title: string; goal: string; tone: string; contentTypes: string[] }) => {
    const nodes = data.contentTypes.map((type, index) => ({
      id: `${type}-${index}`,
      agent: `${type} agent`,
      status: 'pending' as const,
      dependsOn: index === 0 ? [] : [`${data.contentTypes[index - 1]}-${index - 1}`]
    }));
    setPlanNodes(nodes);
    setStep('plan');
  };

  const startExecution = () => {
    setRuns(
      planNodes.map((node) => ({
        id: `${node.id}-run`,
        nodeId: node.id,
        agentName: node.agent,
        status: 'running'
      }))
    );
    setLogs([]);
    setStep('progress');
    setTimeout(() => {
      setRuns((prev) => prev.map((run) => ({ ...run, status: 'completed' })));
      setLogs((prev) => [
        ...prev,
        {
          id: 'log-1',
          type: 'info',
          message: 'Execution finished in mock mode.',
          timestamp: new Date().toISOString()
        }
      ]);
      setResults({
        text: 'Mock marketing copy generated by UI demo.',
        artifacts: [
          {
            id: 'art-1',
            type: 'image',
            path: '/mock/image.png'
          }
        ]
      });
      setStep('results');
    }, 1000);
  };

  return (
    <div className="min-h-screen bg-slate-50 p-6">
      <nav className="mb-6 flex space-x-4 text-sm text-slate-500">
        <button onClick={() => setStep('wizard')}>Wizard</button>
        <button onClick={() => setStep('plan')}>Plan</button>
        <button onClick={() => setStep('progress')}>Progress</button>
        <button onClick={() => setStep('results')}>Results</button>
        <button onClick={() => setStep('settings')}>Settings</button>
      </nav>
      {step === 'wizard' && <WizardPage onCreate={createTask} />}
      {step === 'plan' && <PlanPreviewPage nodes={planNodes} onAccept={startExecution} />}
      {step === 'progress' && (
        <ProgressPage runs={runs} logs={logs} onPause={() => {}} onResume={() => {}} />
      )}
      {step === 'results' && <ResultsPage text={results.text} artifacts={results.artifacts} />}
      {step === 'settings' && (
        <SettingsPage
          onSave={() =>
            setLogs((prev) => [
              ...prev,
              {
                id: Date.now().toString(),
                type: 'info',
                message: 'Settings saved',
                timestamp: new Date().toISOString()
              }
            ])
          }
        />
      )}
    </div>
  );
}
